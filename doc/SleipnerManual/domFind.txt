-Navigating the dom: domFind, domFindNext functions
These functions (domFindNext in particular) are the very basic workhorses of the Sleipner webmining system.
If forexample we wanted to navigate to the start of the product listing in our simple example we could use:
domFind("Product listing", "contains" );
This would place the current dom position on the text 'Product listing' between the two H1's. The compare function 'contains' simply means that we want to find a node which contains the string 'Product listing' meanining that a node with the text 'Product listing clothes' for example would match also. If you wanted an excact macth you would use 'equals'. Other comparison functions are: 'endsWith', 'startsWith', 'regexSearch' etc. See the reference for the complete listing. 

NOTE: All these functions also exist in versions prepended with an 'i' like 'icontains'. These simply ignore casing in the string. 
IMPL: However for the time being the ignore case versions only work reliably with chars from the basic (US) ASCII char set. This is a subset of UTF-8 which is the format Sleipner needs it's scriptfiles to be saved in, so everything is ok, just it will be a later version where we support ignore case functions for the full UTF-8 char set.

Refering to the table visualizing our linearized dom tree we can illustrate how the domFind functions works:
  - 1. Start from position 1
  - 2. For every node apply the compare function to the node value and the compare string. 
  - 3. IF ( node-value contains 'Product listing' ) THEN STOP

So at the first matching node the search is terminated and the current dom position is set to this node . Calling valueGet() will now return the string 'Product listing'. In addition the return value from domFind will be the index of the position (index 10 in our example). 

In case the searched for node is not found domFind returns 0 (zero).

Since 0 evaluates to false and everything else evaluates to true in boolean expressions this means you can do code like this:
\code
if ( domFind( "EUR", "contains") ) {
	outputValue("product_price");	// Writes current value to output XML under name 'product_price'. 
}
\endcode

NOTE: See later section for more details on outputValueXX functions.

--domFind general form
A more general form of domFind takes as first parameter the number of occurrences to find before returning true. For example if
we wanted to find the price of the second product we could do:
#domFind( 2, "EUR", "contains");#
This means we want to find the second node that countains the string 'EUR'. And ofcourse:
#domFind( 1, "EUR", "contains");# is same as our original simpler form #domFind( "EUR", "contains");#


--domFindNext
The domFindNext function works almost identical to domFind. The differences are:
 - 1. The starting position is current dom position as left from a previous domFind or domFindNext.
 - 2. I's possible to search backwards using negative values as first parameter. 
      For example: #domFindNext(-1, "class2", "equals");# assuming current position is not at the top.

If you (like the typical case) simply need to find the first occurrence of something you can do #domFindNext("EUR", "contains");# and #domFindPrev("EUR", "contains")# for backwards direction. 

To illustrate the "power" of domFindNext a small example to get all the product prices on the page:

\code
domNewSearch(); //Reset current dom position to first node
while ( domFindNext( 1, "EUR", "contains") ) {
	outputValue("product_price");
}
\endcode

Before proceeding we will expand somewhat on the while loop example, making it more real-world-use like. Most likely we want to find more than one property for each product and then the above approach doesn't scale too well. In our simple clothing store example we now want to get the name and the price of each product. 
The idea is that the domFindNext within the while clause should find the beginning of a product section. From this position we then apply domFindNext to get to each of the product properties.


In pseudocode what we want is:
\pseudocode
domNewSearch();
WHILE ( find-the-start-of-next-product-section ) DO
    domFindNext ( position-of-product-name );
    outputValue("product_name");
        
    domFindNext ( position-of-product-price );
    outputValue("product_price");
ENDWHILE
\endpseudocode

In real code this looks like the following:

\code
domNewSearch(); //Reset current dom position to first node
while ( domFindNext( 1, "product", "equals") ) {
    domFindNext ( 1, "color:green", "contains" );
    domStep(1);                     // Goto actual name which is next position
    outputValue("product_name");
    
    domFindNext( 1, "EUR", "contains");
    outputValue("product_price");
}
\endcode

To prepare for the following elaborations of this example we shall transform it to a form which is even more useable in real world scripts:

\code
function MyScript_SearchListing_mine()            
{
    domNewSearch(); //Reset current dom position to first node
    while ( domFindNext( 1, "product", "equals") ) {
        GetProduct();
    }
}


function GetProduct()            
{
    domFindNext ( 1, "color:green", "contains" );
    domStep(1);                     // Goto actual name which is next position
    outputValue("product_name");
    
    domFindNext( 1, "EUR", "contains");
    outputValue("product_price");
}
\endcode

The ".._mine()" function simply loops though all the product "starting points" and calls GetProduct(). This function then assumes that the current dom position is at the beginning of a product listing and then searches each of the properties for one product from that position using domFindNext's.

In a perfect world this works really well, but what if for example the first product did not have any price listed for some reason? In this case the #domFindNext( "EUR", "contains");# would not fail as such but instead of finding the (non existant price) for the Shirt, it would instead find the price for the next item and wrongly record the Shirt as having a price of 2.75 EUR. We can fix this very easy by introducing the "stop position":


--Stop position and domFindNextPos
domFindNextPos works excactly like domFindNext except that it simply returns the index of the position, if any. The actual current dom position is never changed. 


This is the perfect find function to use when you want to set the stop position. If you set the stop position using domSetStopPos(), all searches (from a position before the stop position ofcourse) will never try to look beyond that position. It is as if the end of the document is changed, until you call domClearStopPos(). 

Using this information we can now fix the problem described above by changing the code slightly:

\code
function MyScript_SearchListing_mine()            
{
    domNewSearch();
    while ( domFindNext ( 1, "product", "equals" ) ) {
        $iStopPos = domFindNextPos( 1, "product", "equals" );
        domSetStopPos( $iStopPos );
        GetProduct();
        domClearStopPos();
    }
}

function GetProduct()            
{
    domFindNext ( 1, "color:green", "contains" );
    domStep(1);                     // Goto actual name which is next position
    outputValue("product_name");
    
    domFindNext( 1, "EUR", "contains");
    outputValue("product_price");
}
\endcode


This stop position prevents that we accidently get the property value (like the price) of the next product assigned to the current one in case the domFindNext() function fails. This is because the stop position prevents the #domFindNext( "EUR", "contains");# call to continue down to the next product (the Socks in our example page).

We still output the value of the dom position as left by the failing. This position is typically the end of the document, but in any case it's not likely the price of the product we want or even a price at all. Luckily this problem is even easier remedied than the other one. We simply add an if clause around each of the domFindNext() calls for the product:


\code
function MyScript_SearchListing_mine()            
{
    domNewSearch();
    while ( domFindNext ( 1, "product", "equals" ) ) {
        $iStopPos = domFindNextPos( 1, "product", "equals" );
        domSetStopPos( $iStopPos );
        GetProduct();
        domClearStopPos();
    }
}

function GetProduct()            
{
    if ( domFindNext ( 1, "color:green", "contains" ) ) {
        domStep(1);                     // Goto actual name which is next position
        outputValue("product_name");
    }
    
    if ( domFindNext( 1,  "EUR", "contains") ) {
        outputValue("product_price");
    }
}
\endcode

Here we see how we take advantage of having a general purpose language as PHP directly at our disposal. Adding an if clause around each product property we want is effective but alsso a bit repetitive since we generally always want to do it. We will fix this very elegantly when we later introduce the outputValueFindNext() function, but for now we have one last thing to do in order to make the finding of product properties robust.

--domPointerPush, domPointerPop
It is highly recommended always to initiate a domFindNext() call from a well defined/consistent position. This is true for both the while loop and for each of the product properties. We can achive this by saving the dom position before we initiate a search and then we restore it afterwards. An easy way to save the current dom position for later easy retrieval is domPointerPush(). You can then restore later using domPointerPop(). Since the position is pushed on a stack (like a stack of dinner plates) you can call push/pop multiple times nested. Just make sure that you call push and pop an equal number of times. 

Ofcourse if you prefer you can just as well use
\code
$iPosSave = domGetPos();
domFindNext(...);
...
domSetPos($iPosSave);
\endcode

But here we will use push/pop to make our working example very robust indead. Here we go:



\code
function MyScript_SearchListing_mine()            
{
    domNewSearch();
    while ( domFindNext ( 1, "product", "equals" ) ) {
        domPointerPush();
        $iStopPos = domFindNextPos( 1, "product", "equals" );
        domSetStopPos( $iStopPos );
        GetProduct();
        domClearStopPos();
        domPointerPop();
    }
}

function GetProduct()            
{
    // Get product name
    domPointerPush();
    if ( domFindNext ( 1, "color:green", "contains" ) ) {
        domStep(1); // Goto actual name which is next position
        outputValue("product_name");
    }
    domPointerPop();
    
    // Get product price
    domPointerPush();
    if ( domFindNext ( 1, "EUR", "contains" ) ) {
       outputValue("product_price");
    }
    domPointerPop();
}
\endcode

We have added push/pop around each of the code sections getting a product property in our GetProduct() function. This ensures that for each product property we start the seach from the beginning of the product section on the page. This is very important since we are now certain that each domFindNext for the product properties starts from a well defined position. Even if the previous domFindNext did not find anything and/or left the current position completely "off track" we can only it will never mess up the next property. 
Same goes for the push/pop calls in the while loop. We hereby ensure that each #domFindNext ( "product", "equals" )# call within the while loop starts from the correct position regardless of what happens within the loop. 




--Dom sequences
Instead of simply matching on the contents of a single node like we have done so far, it is most often needed to match on a short sequence of nodes. The concept is a simple extension of our previous domFindNext (and domFind) calls where we use a comma separated list of node values instead of just a single value.
For example we could change the # domFindNext ( "product", "equals" )# to look for a sequence like this: 
#domFindNext ( "DIV, class, product", "equals" )# This dom sequence only matches if all 3 nodes are found after one another. The "equals" function then applies to each of the nodes. 

---Named dom sequences
Dom sequences are very flexible and easy to use, and one great way to use them are through "named dom sequences", which simply assigns a descriptive name to a dom sequence that can later be used. This approach has many advantages all of which will become apparent by the end of this chapter when we have covered the outputValueXX functions. Hare we will focus on the advantages not related to outputValue functions. 
To create our #domFindNext ( "DIV, class, product", "equals" )#  and use it simply do:

\code
domSeqCreate  ( "ProductStartSeq"   , "DIV, class, product" , "equals"  ); 
...
while ( domFindNext ( "ProductStartSeq" ) ) {
...
}
\endcode

So we create a named dom sequence using domSeqCreate() giving it a descriptive name and we can now refer to this name instead of writing the sequence out. The domFindXX functions actually always assumes that the sequence argument you supply is a names dom sequence and then looks up the actual sequence and applies that instead of the name. In case no sequence is found the argument is simply used to create a dom sequence which is then used - as we have done it so far.

The current position after calling domFind or domFindNext on a dom sequence will be at the last element in the sequence, which in the above example means at the node containing the string 'product'. In case you are searching backwards the current dom position will be at the first element of the sequence ('DIV' in the above example).

Before enhancing our example we shall introduce the slightly more general form of domSeqCreate:
#domSeqCreate(SEQ_NAME, SEQUENCE_STRING, COMPARE_OPERATOR, STEPS_AFTER)#

This allows us to easily fine tune the final dom position after a succesfull match by simply moving/stepping nodes forward or backward after the initial final position is found. The dom sequence for finding the product name in our example could be as simple as #domSeqCreate  ( "ProductNameSeq", "color:green", "contains" );# which simply is a names sequence of lenght 1. This is all simple but we still end up one position short of the actual name of the the product, but this can be fixed by adding the last step parameter:
#domSeqCreate  ( "ProductNameSeq", "color:green", "contains", 1 );# Now after finding the dom position of the ProductNameSeq the domFindNext function does a final adjustment to the current position by stepping one node forward ending up at he actual product name.

Ofcourse you can also step backwards like e.g. #domSeqCreate  ( "ProductNameSeq" , "color:green", "contains", -2 );# stepping to nodes back after matching.

So now we have:

\code
// Define dom sequences for the positions we need
domSeqCreate  ( "ProductStartSeq"   , "DIV, class, product" , "equals"  ); 
domSeqCreate  ( "ProductNameSeq"    , "color:green"         , "contains", 1 ); 
domSeqCreate  ( "ProductPriceSeq"   , "EUR"                 , "contains" ); 


// Completely general way way of looping thruogh a list of products
function MyScript_SearchListing_mine()            
{
    domNewSearch();
    while ( domFindNext ( 1, "ProductStartSeq" ) ) {
        domPointerPush();
        $iStopPos = domFindNextPos( 1, "ProductStartSeq" );
        domSetStopPos( $iStopPos );
        GetProduct();
        domClearStopPos();
        domPointerPop();
    }
}

function GetProduct()            
{
    // Get product name
    domPointerPush();
    if ( domFindNext ( 1, "ProductNameSeq" ) ) {
        outputValue("product_name");    // No need for a step since the dom sequence allready specified this.
    }
    domPointerPop();
    
    // Get product price
    domPointerPush();
    if ( domFindNext ( 1, "ProductPriceSeq" ) ) {
       outputValue("product_price");
    }
    domPointerPop();
}
\endcode

---domSeqCreate: Operator fine grained control
Sometimes you need a little finer control over the matching of each node than a single one-size-fits-all like 'equals' or 'contains' can offer. Lets for a second assume that the product css class is not simply called 'product' but alternates between 'productBold' and 'productNormal' because the web designer wanted to display the product in a table with alternating styles (eg. colors) for easier readability. We could ofcourse simply do:
#domSeqCreate  ( "ProductStartSeq", "DIV, class, product" , "contains"  );# 
which would work fine, but you could also specify that you only wanted the 'contains' operator used for the last node in the sequence:

#domSeqCreate  ( "ProductStartSeq" , "DIV, class, #contains:product" , "equals"  );# 
Or using the abbreviated form 'con' for the 'contains' operator:
#domSeqCreate  ( "ProductStartSeq" , "DIV, class, #con:product" , "equals"  );# 

Notice how we use '#contains:string-to-match' or '#con:string-to-match'.

The most common operators are:
equals     = eq   : Node must be equal to value, case sensitive.
iequals    = ieq  : Node must be equal to value, case in-sensitive (IMPL TODO: only a-z for now).
contains   = con  : Node must contain the value, case sensitive.
icontains  = icon : Node must contain the value, case in-sensitive (IMPL TODO: only a-z for now).

See the reference for all the operators and their short forms.


---dom sequence alternatives
The example above using alternating styles in table rows are quite common on webpages and somtimes the pages that are in fact more or less identical in structure diffen in such ways. Another popular thing to do on commercial sites is to add a line with "Special discount of 30% on this product" for just a few (seemingly random ) products on a page. Things like that sometimes makes it hard to find a single dom sequence that always finds the right position. 

To remedy this we can simply add a list of prioritized alternatives for finding the correct position like this: 

\code
// Define dom sequences for the positions we need
domSeqCreate  ( "ProductStartSeq#1"   , "DIV, class, productBold" , "equals"  ); 
domSeqCreate  ( "ProductStartSeq#2"   , "DIV, class, productNormal" , "equals"  ); 
... 
while ( domFindNext ( 1, "ProductStartSeq" ) ) { // Use normally, first to match 'wins'
}
...
\endcode

They all share the same common name as before and simply adds '#N' to the end of the base sequence name. You can add as many alternatives as you like and they will be evaluated in the order specified - i.e. the numbers #1, #2, #3 ... are simply a convention that we strongly encourage. The first one that macthes 'wins' and the others are not considered. It is equivalent to a logical OR between each of the alternatives.
When using a dom sequence specified with alternatives there is no difference from the normal case: Simply write the base name of the sequence, before the '#N's' like shown the the above code snippet (#domFindNext ( 1, "ProductStartSeq" )#).

--Wildcards (* and ?) in dom sequences
Dom sequences also support a match-any-node (?) and a "greedy" match-many-nodes (*) specifier. This is not nearly as complicated as it might sound. 

---Dom sequences using optional args: ? specifier
The '?' specifier simply states that the node value can be anyting, i.e. we will always mach at this position in the dom sequence regardless of the node value. Let's specify the "ProductPriceSeq" i a different way where we do not assume that the price field contains the string "EUR". So now we assume that the html around the prices looks like this:

\code
<DIV style="float:left" class="class2">12.75</DIV><br />
\endcode

\code
domSeqCreate  ( "ProductPriceSeq", "class2, ?, /DIV", "equals", -1 );  
\endcode

So here we look for a sequence which is: 'class2', ANY-NODE, '/DIV'.
We know that the actual price we want is the node where we have the '?' but we have nothing solid to macth on, thus the quetion mark and then the final '/DIV'. We are then one to far and therefore we step one back after we have found the dom position be specifying the '-1' in the domSeqCreate(). 

This example is somwhat contrieved since the use of class2 is unique to the position just before the price in this simple example. So we could have done #domSeqCreate  ( "ProductPriceSeq", "class2", "equals", 1 );# . But the use of '?' in dom sequences is straitforward and is very often "just what the doctor ordered".

---Dom sequences using greedy match: * specifier
The '?' specifier has a slightly more advanced cousin '*' which matches any number of nodes and actually can be viewed as if it simply splits up the dom sequence into smaller subsequences. An (again somewhat contrieved) example from out sample html code follows:

\code
domSeqCreate  ( "ProductNameSeq", "class, product, *, /DIV, DIV", "equals", -2 );  
\endcode
The above means that we look for a sequence like:
  -1. Sub-sequence: 'class', 'product'
  -2. Any number of nodes until we meet
  -3. Sub-sequence: '/DIV', 'DIV'  (end of DIV-tag, then start of another DIV-tag)

Again to actually end up at the product name we need to take two steps back from the final position at the last 'DIV' that we mach in the sequence.

As mentioned the use of the '*' specifier is equivalent to splitting the whole sequence up into smaller dom sequences which are then searched for in order. So if we do: 
#domFindNext ( 1, "class, product, *, /DIV, DIV", "equals" )# it is then equivalent to the following code:


\code
if ( domFindNext ( 1, "class, product", "equals" ) ) {
    domFindNext ( 1, "/DIV, DIV", "equals" );
}
\endcode

So using '*' specifier is not hard at all, but often you can do without it. However, for those situations where the html code simply does not allow for matching on a single simple sequence it really is both effective and quite simple to use.

--Custom php function in domFind/domFindNext
In case a dom sequence for some reason can't give you what you need, it is possible to substitute a named dom sequence for a user defined php function. This php function should then move the current dom position to the node desired.

All you need to do is to define a php function with the same name as the name you are using in your domFind/domFindNext function like this. Let's use this approach to rewrite the example from just above with the dom sequence alternatives. Recap that we assumed the html was in a table where each row had alternating colors using two different css styles 'productBold' and 'productNormal'. This meant that for the ProductStartSeq dom sequence we needed to look for both possibilities. 

Now lets achieve the same effect using a user defined php function with the same name as the dom sequence.

\code
...
function ProductStartSeq() 
( 
    if ( domFindNext( 1, "DIV, class, productBold" , "equals"  ) ) {
        return ;
    }
    else domFindNext( 1, "DIV, class, productNormal" , "equals"  ) ;
}
... 
while ( domFindNext ( 1, "ProductStartSeq" ) ) { // Use like normal (named) dom sequence
}
...
\endcode

The return value is ignored by the below code so need to worry about returning anything. All that counts is that you have set the current position to some node. So if you by "devine intervention" or some other means know the exact dom position you need you could also just set it directly using #domSetPos( $myPreCalculatedPosition )#.


--Dom sequences with parameters domFindNextParams()
The alternative form of domFindNext, which support dymamic parameters is called domFindNextParams and simply takes an extra parameter which is a comma separated list of arguments to the 'underlying' domFindNext. It might sound a little confusing a first but two things are worth noting:
 -1. It is currently mainly needed when using the 'DomPosClickState' dom navigator action. See more in the dom navigator chapter. Here the example should make it clear why it is a smart feature in that particular use case.
 -2. It really is not that hard to understand, if you know for example the printf() function or C#'s Console.print with positional formatting arguments.
 
To create a dom sequence that can be used with domFindNextParams params you simply supply placeholders for the arguments using #1, #2, ... #9. For example:
 
#domSeqCreate("MyDomSeq", "DIV, class, #1, style, #2", "contains" );# 

It can then be used like this:
#domFindNextParams( 1, "MyDomSeq", "myClass, color:green" );#
(which is equivalent to having defined the original sequence like this)
#domSeqCreate("MyDomSeq", "DIV, class, myClass, style, color:green", "contains" );#

So each of the #1, #2, .. are substituted for the actual parameters (myClass, color:green) whom we supply as one comma separated string ("myClass, color:green"). This string is then split into the separate arguments.

Let's try another example just to clarify:
#domFindNextParams( 1, "MyDomSeq", "anotherClass, font:Arial" );#
(which is equivalent to having defined the original sequence like this)
#domSeqCreate("MyDomSeq", "DIV, class, anotherClass, style, font:Arial", "contains" );#


